@SingleIn(scope = AppScope::class)
@Inject
class S1 {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  object $$MetroFactory : Factory<S1> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun create(): Factory<S1> {
      return $$MetroFactory
    }

    fun newInstance(): S1 {
      return S1()
    }

    override operator fun invoke(): S1 {
      return $$MetroFactory.newInstance()
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(): S1 {
      return error(message = "Never called")
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@SingleIn(scope = AppScope::class)
@Inject
class S2 {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  object $$MetroFactory : Factory<S2> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun create(): Factory<S2> {
      return $$MetroFactory
    }

    fun newInstance(): S2 {
      return S2()
    }

    override operator fun invoke(): S2 {
      return $$MetroFactory.newInstance()
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(): S2 {
      return error(message = "Never called")
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@SingleIn(scope = AppScope::class)
@Inject
class S3 {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  object $$MetroFactory : Factory<S3> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun create(): Factory<S3> {
      return $$MetroFactory
    }

    fun newInstance(): S3 {
      return S3()
    }

    override operator fun invoke(): S3 {
      return $$MetroFactory.newInstance()
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(): S3 {
      return error(message = "Never called")
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@SingleIn(scope = AppScope::class)
@Inject
class S4 {
  val s1: S1
    field = s1
    get

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroFactory : Factory<S4> {
    private /* final field */ val s1: Provider<S1> = s1
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(s1: Provider<S1>): Factory<S4> {
        return $$MetroFactory(s1 = s1)
      }

      fun newInstance(s1: S1): S4 {
        return S4(s1 = s1)
      }

    }

    private constructor(s1: Provider<S1>) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): S4 {
      return Companion.newInstance(s1 = <this>.#s1.invoke())
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(s1: S1): S4 {
      return error(message = "Never called")
    }

  }

  constructor(s1: S1) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@SingleIn(scope = AppScope::class)
@Inject
class S5 {
  val s4: S4
    field = s4
    get

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroFactory : Factory<S5> {
    private /* final field */ val s4: Provider<S4> = s4
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(s4: Provider<S4>): Factory<S5> {
        return $$MetroFactory(s4 = s4)
      }

      fun newInstance(s4: S4): S5 {
        return S5(s4 = s4)
      }

    }

    private constructor(s4: Provider<S4>) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): S5 {
      return Companion.newInstance(s4 = <this>.#s4.invoke())
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(s4: S4): S5 {
      return error(message = "Never called")
    }

  }

  constructor(s4: S4) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@DependencyGraph(scope = AppScope::class)
interface TestGraph {
  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @GraphFactoryInvokeFunctionMarker
    operator fun invoke(): TestGraph {
      return $$MetroGraph()
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroGraph : TestGraph {
    internal val s1Provider: Provider<S1>

    internal val s2Provider: Provider<S2>

    internal val s3Provider: Provider<S3>

    internal val s4Provider: Provider<S4>

    internal val s5Provider: Provider<S5>

    private val shard1: Shard1
      private get(): Shard1 {
        return <this>.#shard1
      }

    private val shard2: Shard2
      private get(): Shard2 {
        return <this>.#shard2
      }

    private val shard3: Shard3
      private get(): Shard3 {
        return <this>.#shard3
      }

    internal class Shard1 {
      internal constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      internal fun initialize(component: $$MetroGraph) {
        component.#s1Provider = Companion.provider<Provider<S1>, S1>(delegate = $$MetroFactory.create())
        component.#s2Provider = Companion.provider<Provider<S2>, S2>(delegate = $$MetroFactory.create())
      }

    }

    internal class Shard2 {
      internal constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      internal fun initialize(component: $$MetroGraph) {
        component.#s3Provider = Companion.provider<Provider<S3>, S3>(delegate = $$MetroFactory.create())
        component.#s4Provider = Companion.provider<Provider<S4>, S4>(delegate = Companion.create(s1 = component.#s1Provider))
      }

    }

    internal class Shard3 {
      internal constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      internal fun initialize(component: $$MetroGraph) {
        component.#s5Provider = Companion.provider<Provider<S5>, S5>(delegate = Companion.create(s4 = component.#s4Provider))
      }

    }

    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

      <this>.#shard1 = Shard1()
      <this>.#shard2 = Shard2()
      <this>.#shard3 = Shard3()
      <this>.#shard1.initialize(component = <this>)
      <this>.#shard2.initialize(component = <this>)
      <this>.#shard3.initialize(component = <this>)
    }

    override val s1: S1
      override get(): S1 {
        return <this>.#s1Provider.invoke()
      }

    override val s2: S2
      override get(): S2 {
        return <this>.#s2Provider.invoke()
      }

    override val s3: S3
      override get(): S3 {
        return <this>.#s3Provider.invoke()
      }

    override val s4: S4
      override get(): S4 {
        return <this>.#s4Provider.invoke()
      }

    override val s5: S5
      override get(): S5 {
        return <this>.#s5Provider.invoke()
      }

  }

  abstract val s1: S1
    abstract get

  abstract val s2: S2
    abstract get

  abstract val s3: S3
    abstract get

  abstract val s4: S4
    abstract get

  abstract val s5: S5
    abstract get

}

