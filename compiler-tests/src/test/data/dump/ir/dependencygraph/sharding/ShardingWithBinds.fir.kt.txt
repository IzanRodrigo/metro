// FILE: ShardingWithBinds.kt

@SingleIn(scope = AppScope::class)
@Inject
class RepositoryImpl : Repository {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  object $$MetroFactory : Factory<RepositoryImpl> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun create(): Factory<RepositoryImpl> {
      return $$MetroFactory
    }

    fun newInstance(): RepositoryImpl {
      return RepositoryImpl()
    }

    override operator fun invoke(): RepositoryImpl {
      return $$MetroFactory.newInstance()
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(): RepositoryImpl {
      return error(message = "Never called")
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@SingleIn(scope = AppScope::class)
@Inject
class Service {
  val repo: Repository
    field = repo
    get

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroFactory : Factory<Service> {
    private /* final field */ val repo: Provider<Repository> = repo
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(repo: Provider<Repository>): Factory<Service> {
        return $$MetroFactory(repo = repo)
      }

      fun newInstance(repo: Repository): Service {
        return Service(repo = repo)
      }

    }

    private constructor(repo: Provider<Repository>) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): Service {
      return Companion.newInstance(repo = <this>.#repo.invoke())
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(repo: Repository): Service {
      return error(message = "Never called")
    }

  }

  constructor(repo: Repository) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@BindingContainer
@ContributesTo(scope = AppScope::class)
interface AppModule {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  abstract class $$BindsMirror {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @Binds
    @CallableMetadata(callableName = "bindRepository", propertyName = "", startOffset = 458, endOffset = 510)
    abstract fun bindRepository(impl: RepositoryImpl): Repository

  }

  @Binds
  abstract fun bindRepository(impl: RepositoryImpl): Repository

}

interface Repository {
}

@DependencyGraph(scope = AppScope::class)
interface TestGraph {
  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @GraphFactoryInvokeFunctionMarker
    operator fun invoke(): TestGraph {
      return $$MetroGraph()
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroGraph : TestGraph {
    internal val repositoryImplProvider: Provider<RepositoryImpl>
      field = Companion.provider<Provider<RepositoryImpl>, RepositoryImpl>(delegate = $$MetroFactory.create())

    internal val serviceProvider: Provider<Service>
      field = Companion.provider<Provider<Service>, Service>(delegate = Companion.create(repo = <this>.#repositoryImplProvider))

    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override val repository: Repository
      override get(): Repository {
        return <this>.#repositoryImplProvider.invoke()
      }

    override val service: Service
      override get(): Service {
        return <this>.#serviceProvider.invoke()
      }

  }

  abstract val repository: Repository
    abstract get

  abstract val service: Service
    abstract get

}

// FILE: appModuleAppScope.kt
package metro.hints

fun AppScope(contributed: AppModule) {
  return error(message = "Never called")
}

