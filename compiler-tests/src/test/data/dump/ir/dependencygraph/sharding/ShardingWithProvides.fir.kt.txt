// FILE: ShardingWithProvides.kt

@SingleIn(scope = AppScope::class)
@Inject
class Service1 {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  object $$MetroFactory : Factory<Service1> {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    fun create(): Factory<Service1> {
      return $$MetroFactory
    }

    fun newInstance(): Service1 {
      return Service1()
    }

    override operator fun invoke(): Service1 {
      return $$MetroFactory.newInstance()
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(): Service1 {
      return error(message = "Never called")
    }

  }

  constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

class Service2 {
  val s1: Service1
    field = s1
    get

  constructor(s1: Service1) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@SingleIn(scope = AppScope::class)
@Inject
class Service3 {
  val s2: Service2
    field = s2
    get

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroFactory : Factory<Service3> {
    private /* final field */ val s2: Provider<Service2> = s2
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(s2: Provider<Service2>): Factory<Service3> {
        return $$MetroFactory(s2 = s2)
      }

      fun newInstance(s2: Service2): Service3 {
        return Service3(s2 = s2)
      }

    }

    private constructor(s2: Provider<Service2>) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): Service3 {
      return Companion.newInstance(s2 = <this>.#s2.invoke())
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(s2: Service2): Service3 {
      return error(message = "Never called")
    }

  }

  constructor(s2: Service2) /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

}

@DependencyGraph(scope = AppScope::class)
interface TestGraph {
  companion object Companion {
    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    @GraphFactoryInvokeFunctionMarker
    operator fun invoke(): TestGraph {
      return $$MetroGraph()
    }

  }

  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  class $$MetroGraph : TestGraph {
    internal val service1Provider: Provider<Service1>

    internal val provideService2Provider: Provider<Service2>

    internal val service3Provider: Provider<Service3>

    private val shard1: Shard1
      private get(): Shard1 {
        return <this>.#shard1
      }

    private val shard2: Shard2
      private get(): Shard2 {
        return <this>.#shard2
      }

    internal class Shard1 {
      internal constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      internal fun initialize(component: $$MetroGraph) {
        component.#service1Provider = Companion.provider<Provider<Service1>, Service1>(delegate = $$MetroFactory.create())
        component.#provideService2Provider = Companion.provider<Provider<Service2>, Service2>(delegate = Companion.create(s1 = component.#service1Provider))
      }

    }

    internal class Shard2 {
      internal constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      internal fun initialize(component: $$MetroGraph) {
        component.#service3Provider = Companion.provider<Provider<Service3>, Service3>(delegate = Companion.create(s2 = component.#provideService2Provider))
      }

    }

    private constructor() /* primary */ {
      super/*Any*/()
      /* <init>() */

      <this>.#shard1 = Shard1()
      <this>.#shard2 = Shard2()
      <this>.#shard1.initialize(component = <this>)
      <this>.#shard2.initialize(component = <this>)
    }

    override val service1: Service1
      override get(): Service1 {
        return <this>.#service1Provider.invoke()
      }

    override val service2: Service2
      override get(): Service2 {
        return <this>.#provideService2Provider.invoke()
      }

    override val service3: Service3
      override get(): Service3 {
        return <this>.#service3Provider.invoke()
      }

  }

  abstract val service1: Service1
    abstract get

  abstract val service2: Service2
    abstract get

  abstract val service3: Service3
    abstract get

}

@BindingContainer
@ContributesTo(scope = AppScope::class)
object AppModule {
  @Deprecated(message = "This synthesized declaration should not be used directly", level = DeprecationLevel.HIDDEN)
  @CallableMetadata(callableName = "provideService2", propertyName = "", startOffset = 400, endOffset = 499)
  class ProvideService2$$MetroFactory : Factory<Service2> {
    private /* final field */ val s1: Provider<Service1> = s1
    companion object Companion {
      private constructor() /* primary */ {
        super/*Any*/()
        /* <init>() */

      }

      fun create(s1: Provider<Service1>): Factory<Service2> {
        return ProvideService2$$MetroFactory(s1 = s1)
      }

      fun provideService2(s1: Service1): Service2 {
        return AppModule.provideService2(s1 = s1)
      }

    }

    private constructor(s1: Provider<Service1>) /* primary */ {
      super/*Any*/()
      /* <init>() */

    }

    override operator fun invoke(): Service2 {
      return Companion.provideService2(s1 = <this>.#s1.invoke())
    }

    @SingleIn(scope = AppScope::class)
    fun mirrorFunction(s1: Service1): Service2 {
      return error(message = "Never called")
    }

  }

  private constructor() /* primary */ {
    super/*Any*/()
    /* <init>() */

  }

  @Provides
  @SingleIn(scope = AppScope::class)
  private fun provideService2(s1: Service1): Service2 {
    return Service2(s1 = s1)
  }

}

// FILE: appModuleAppScope.kt
package metro.hints

fun AppScope(contributed: AppModule) {
  return error(message = "Never called")
}
